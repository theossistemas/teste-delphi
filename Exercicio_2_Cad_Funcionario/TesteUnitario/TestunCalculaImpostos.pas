unit TestunCalculaImpostos;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, unCalculaImpostos, unFuncionario, unDependente;

type
  // Test methods for class TCalculaImpostoIR

  TestTCalculaImpostoIR = class(TTestCase)
  strict private
    FCalculaImpostoIR: TCalculaImpostoIR;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCalcular;
    procedure TestCalcular_UmDependenteIsCalculaIR;
    procedure TestCalcular_UmDependenteNotIsCalculaIR;
    procedure TestCalcular_DoisDependenteIsCalculaIR;
    procedure TestCalcular_DoisDependenteNoIsCalculaIR;
    procedure TestCalcular_DoisDependenteUmDelesNoIsCalculaIR_OutroIsCalculaIR;
  end;
  // Test methods for class TCalculaImpostoINSS

  TestTCalculaImpostoINSS = class(TTestCase)
  strict private
    FCalculaImpostoINSS: TCalculaImpostoINSS;
    //FFuncionario: TFuncionario;
    //FDependente1: TDependente;
    //FDependente2: TDependente;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCalcular;
    procedure TestCalcular_UmDependenteIsCalculaINSS;
    procedure TestCalcular_UmDependenteNotIsCalculaINSS;
    procedure TestCalcular_DoisDependenteIsCalculaINSS;
  end;

implementation

uses
  System.SysUtils;

procedure TestTCalculaImpostoIR.SetUp;
begin
  FCalculaImpostoIR := TCalculaImpostoIR.Create;

end;

procedure TestTCalculaImpostoIR.TearDown;
begin

  FreeAndNil(FCalculaImpostoIR);
end;


procedure TestTCalculaImpostoIR.TestCalcular;
var
  ReturnValue: Double;
  vFuncionario : TFuncionario;
begin
  // TODO: Setup method call parameters
  vFuncionario := TFuncionario.Create;
  try
    ReturnValue := FCalculaImpostoIR.Calcular(vFuncionario);
  finally
    FreeAndNil(vFuncionario)
  end;

  // TODO: Validate method results
end;

procedure TestTCalculaImpostoIR.TestCalcular_DoisDependenteIsCalculaIR;
var
  vFuncionario : TFuncionario;
  vDependente1, vDependente2 : TDependente;
begin
  vFuncionario :=  TFuncionario.Create;
  try
    vDependente1:= TDependente.Create;
    vFuncionario.Nome := 'Emerson';
    vFuncionario.CPF  := '11111111111111';
    vFuncionario.Salario := 1000.00;

    vDependente1.Nome := 'Leonardo';
    vDependente1.CalcularIR := True;
    vFuncionario.ListaDendentes.Add(vDependente1);

    vDependente2:= TDependente.Create;
    vDependente2.Nome := 'Thiago';
    vDependente2.CalcularIR := True;
    vFuncionario.ListaDendentes.Add(vDependente2);

    CheckEquals(120, FCalculaImpostoIR.Calcular(vFuncionario));
  finally
    // FreeAndNil(vDependente1);
    //FreeAndNil(vDependente2);
    FreeAndNil(vFuncionario);
  end;

end;

procedure TestTCalculaImpostoIR.TestCalcular_DoisDependenteNoIsCalculaIR;
var
  vFuncionario : TFuncionario;
  vDependente1, vDependente2 : TDependente;
begin
  vFuncionario := TFuncionario.Create;
  try
    vFuncionario.Nome := 'Emerson';
    vFuncionario.CPF  := '11111111111111';
    vFuncionario.Salario := 1000.00;

    vDependente1 := TDependente.Create;
    vDependente1.Nome := 'Leonardo';
    vDependente1.CalcularIR := False;
    vFuncionario.ListaDendentes.Add(vDependente1);

    vDependente2 := TDependente.Create;
    vDependente2.Nome := 'Thiago';
    vDependente2.CalcularIR := False;
    vFuncionario.ListaDendentes.Add(vDependente2);

    CheckEquals(150, FCalculaImpostoIR.Calcular(vFuncionario));
  finally
    FreeAndNil(vFuncionario)
  end;

end;

procedure TestTCalculaImpostoIR.TestCalcular_DoisDependenteUmDelesNoIsCalculaIR_OutroIsCalculaIR;
var
  vFuncionario : TFuncionario;
  vDependente1, vDependente2 : TDependente;
begin
  vFuncionario := TFuncionario.Create;
  try
    vFuncionario.Nome := 'Emerson';
    vFuncionario.CPF  := '11111111111111';
    vFuncionario.Salario := 1000.00;

    vDependente1 := TDependente.Create;
    vDependente1.Nome := 'Leonardo';
    vDependente1.CalcularIR := False;
    vFuncionario.ListaDendentes.Add(vDependente1);

    vDependente2 := TDependente.Create;
    vDependente2.Nome := 'Thiago';
    vDependente2.CalcularIR := True;
    vFuncionario.ListaDendentes.Add(vDependente2);

    CheckEquals(135, FCalculaImpostoIR.Calcular(vFuncionario));
  finally
    FreeAndNil(vFuncionario)
  end;

end;

procedure TestTCalculaImpostoIR.TestCalcular_UmDependenteIsCalculaIR;
var
  vFuncionario : TFuncionario;
  vDependente1 : TDependente;
begin
  vFuncionario := TFuncionario.Create;
  try
    vFuncionario.Nome := 'Emerson';
    vFuncionario.CPF  := '11111111111111';
    vFuncionario.Salario := 1000.00;

    vDependente1 := TDependente.Create;
    vDependente1.Nome := 'Leonardo';
    vDependente1.CalcularIR := True;
    vFuncionario.ListaDendentes.Add(vDependente1);
    CheckEquals(135, FCalculaImpostoIR.Calcular(vFuncionario));
  finally
    FreeAndNil(vFuncionario);
  end;
end;

procedure TestTCalculaImpostoIR.TestCalcular_UmDependenteNotIsCalculaIR;
var
  vFuncionario : TFuncionario;
  vDependente1 : TDependente;
begin
  vFuncionario := TFuncionario.Create;
  try
    vFuncionario.Nome := 'Emerson';
    vFuncionario.CPF  := '11111111111111';
    vFuncionario.Salario := 1000.00;

    vDependente1 := TDependente.Create;
    vDependente1.Nome := 'Leonardo';
    vDependente1.CalcularIR := False;
    vFuncionario.ListaDendentes.Add(vDependente1);
    CheckEquals(150, FCalculaImpostoIR.Calcular(vFuncionario));
  finally
   FreeAndNil(vFuncionario)
  end;
end;

procedure TestTCalculaImpostoINSS.SetUp;
begin
  FCalculaImpostoINSS := TCalculaImpostoINSS.Create;
  //FFuncionario:= TFuncionario.Create;
  //FDependente1:= TDependente.Create;
  //FDependente2:= TDependente.Create;
end;

procedure TestTCalculaImpostoINSS.TearDown;
begin
 // FDependente1.DisposeOf;
 // FDependente2.DisposeOf;
 // FreeAndNil(FFuncionario);
  FreeandNil(FCalculaImpostoINSS);

end;

procedure TestTCalculaImpostoINSS.TestCalcular;
var
  ReturnValue: Double;
  vFuncionario : TFuncionario;
begin
  // TODO: Setup method call parameters
  vFuncionario := TFuncionario.Create;
  try
     ReturnValue := FCalculaImpostoINSS.Calcular(vFuncionario);
  finally
    FreeAndNil(vFuncionario )
  end;

  // TODO: Validate method results
end;

procedure TestTCalculaImpostoINSS.TestCalcular_DoisDependenteIsCalculaINSS;
var
  vFuncionario : TFuncionario;
  vDependente1, vDependente2 : TDependente;
begin
  vFuncionario := TFuncionario.Create;
  try
    vFuncionario.Nome := 'Emerson';
    vFuncionario.CPF  := '11111111111111';
    vFuncionario.Salario := 1000.00;

    vDependente1 := TDependente.Create;
    vDependente1.Nome := 'Leonardo';
    vDependente1.CalcularINSS := True;
    vFuncionario.ListaDendentes.Add(vDependente1);

    vDependente2 := TDependente.Create;
    vDependente2.Nome := 'Thiago';
    vDependente2.CalcularINSS := True;
    vFuncionario.ListaDendentes.Add(vDependente2);

    CheckEquals(80.00, FCalculaImpostoINSS.Calcular(vFuncionario));
  finally
    FreeAndNil(vFuncionario)
  end;
end;

procedure TestTCalculaImpostoINSS.TestCalcular_UmDependenteIsCalculaINSS;
var
  vFuncionario : TFuncionario;
  vDependente1  : TDependente;
begin
  vFuncionario := TFuncionario.Create;
  try
    vFuncionario.Nome := 'Emerson';
    vFuncionario.CPF  := '11111111111111';
    vFuncionario.Salario := 1000.00;

    vDependente1  := TDependente.Create;
    vDependente1.Nome := 'Leonardo';
    vDependente1.CalcularINSS := True;
    vFuncionario.ListaDendentes.Add(vDependente1);
    CheckEquals(80.00, FCalculaImpostoINSS.Calcular(vFuncionario));
  finally
    FreeAndNil(vFuncionario);
  end;

end;

procedure TestTCalculaImpostoINSS.TestCalcular_UmDependenteNotIsCalculaINSS;
var
  vFuncionario : TFuncionario;
  vDependente1  : TDependente;
begin
  vFuncionario := TFuncionario.Create;
  try
    vFuncionario.Nome := 'Emerson';
    vFuncionario.CPF  := '11111111111111';
    vFuncionario.Salario := 1000.00;

    vDependente1  := TDependente.Create;
    vDependente1.Nome := 'Leonardo';
    vDependente1.CalcularINSS := False;

    vFuncionario.ListaDendentes.Add(vDependente1);
    CheckEquals(0, FCalculaImpostoINSS.Calcular(vFuncionario));
  finally
    FreeAndNil(vFuncionario)
  end;

end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTCalculaImpostoIR.Suite);
  RegisterTest(TestTCalculaImpostoINSS.Suite);
end.

